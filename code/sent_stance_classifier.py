# -*- coding: utf-8 -*-
"""sent_stance_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uBSg4G0NLKmKxddskcmLNQ8gyjo7CtOR
"""

!pip install torch torchvision
!pip install transformers
!pip install tensorboardx
!pip install simpletransformers

import torch

torch.manual_seed(42)

import warnings

# mount the google drive
from google.colab import drive
drive.mount('/content/gdrive')

warnings.filterwarnings('ignore')

from simpletransformers.classification import ClassificationModel
import pandas as pd
import numpy as np
from sklearn.metrics import classification_report
from scipy.special import softmax


df_train = pd.read_csv('gdrive/MyDrive/data/comparg_train.tsv', sep='\t', encoding='utf-8')
df_test = pd.read_csv('gdrive/MyDrive/data/comparg_test.tsv', sep='\t', encoding='utf-8')

#df_train.head()

def mask_objects(row):
    row["text"] = row["answer"].replace(row["object_0"],"[FIRST_ENTITY]").replace(row["object_1"],"[SECOND_ENTITY]")
    return row

def transform_data(df):
  df = df.apply(mask_objects,axis=1)
  return df

df_train = transform_data(df_train).sample(frac=1, random_state=42).reset_index(drop=True)
df_test = transform_data(df_test)

args = {"overwrite_output_dir": True,
        "num_train_epochs": 10,
        "fp16": False,
        "train_batch_size": 16,
        "gradient_accumulation_steps":1,
        "evaluate_during_training": False,
        "max_seq_length": 64,
        "learning_rate": 3e-5,
        "no_cache": True,
        #"save_model_every_epoch": False,
        "reprocess_input_data": True,
        "output_dir": "gdrive/MyDrive/checkpoints"}

model = ClassificationModel("roberta", "roberta-large", num_labels=4, use_cuda=torch.cuda.is_available())
model.train_model(df_train, args=args)

_, raw_outputs, _ = model.eval_model(df_test)
pred_probs = softmax(raw_outputs, axis=1)
pred_labels = np.argmax(raw_outputs, axis=1)

print(classification_report(y_true=df_test.labels.tolist(), y_pred=pred_labels))

test_model = ClassificationModel("roberta", "gdrive/MyDrive/checkpoints", num_labels=4, use_cuda=torch.cuda.is_available())

_, raw_outputs, _ = test_model.eval_model(df_test)
pred_probs_test = softmax(raw_outputs, axis=1)
pred_labels_test = np.argmax(raw_outputs, axis=1)

print(classification_report(y_true=df_test.labels.tolist(), y_pred=pred_labels_test))

def test_results(PATH_CHEKPOINTS):
  test_model = ClassificationModel("roberta", PATH_CHEKPOINTS, num_labels=4, use_cuda=torch.cuda.is_available())

  _, raw_outputs, _ = test_model.eval_model(df_test)
  pred_probs_test = softmax(raw_outputs, axis=1)
  pred_labels_test = np.argmax(raw_outputs, axis=1)

  pred_labels_test_transformed = ["NONE" if x == 0 else "BETTER" if x == 2 else "WORSE" for x in pred_labels_test]
  df_test_transformed = df_test.copy()
  df_test_transformed["labels"].replace({0: "NONE", 2: "BETTER", 3: "WORSE"}, inplace=True)

  print(classification_report(y_true=df_test_transformed.labels.tolist(), y_pred=pred_labels_test_transformed))

PATH_CHEKPOINTS = "gdrive/MyDrive/checkpoints/checkpoint-1800-epoch-5"
test_results(PATH_CHEKPOINTS)

#df_test["pred_labels"] = pred_labels_test
#df_test["pred_probs"] = list(pred_probs_test)
#df_test.to_csv('gdrive/MyDrive/data/5_epochs_comparg_test.tsv', sep='\t', index=False)

PATH_CHEKPOINTS = "gdrive/MyDrive/checkpoints/checkpoint-2880-epoch-8"
test_results(PATH_CHEKPOINTS)

PATH_CHEKPOINTS = "gdrive/MyDrive/checkpoints/checkpoint-3600-epoch-10"
test_results(PATH_CHEKPOINTS)